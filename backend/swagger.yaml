openapi: 3.0.0
info:
  title: Travel Route API
  version: 1.0.0
  description: API for travel route management app - Create, share, and discover travel routes
  contact:
    name: API Support
    email: support@travel-route.com

servers:
  - url: http://localhost:3001
    description: Development server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: objectId
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Location:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        description:
          type: string
        image:
          type: string
        order:
          type: number

    Route:
      type: object
      properties:
        id:
          type: string
          format: objectId
        title:
          type: string
        description:
          type: string
        city:
          type: string
        country:
          type: string
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        user:
          $ref: '#/components/schemas/User'
        isPublic:
          type: boolean
        likes:
          type: array
          items:
            type: string
            format: objectId
        favorites:
          type: array
          items:
            type: string
            format: objectId
        tags:
          type: array
          items:
            type: string
        difficulty:
          type: string
          enum: [easy, medium, hard]
        estimatedDuration:
          type: number
          description: Duration in minutes
        distance:
          type: number
          description: Distance in kilometers
        likesCount:
          type: number
        favoritesCount:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string

    RoutesResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        total:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Routes
    description: Route management endpoints
  - name: User Routes
    description: User-specific route endpoints

paths:
  /api/health:
    get:
      summary: Health check endpoint
      tags: []
      responses:
        200:
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time

  /api/auth/signup:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/auth/me:
    get:
      summary: Get current user info
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User info retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/routes:
    get:
      summary: Get all public routes
      tags: [Routes]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of routes per page
      responses:
        200:
          description: List of routes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'

    post:
      summary: Create new route
      tags: [Routes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - locations
              properties:
                title:
                  type: string
                description:
                  type: string
                city:
                  type: string
                country:
                  type: string
                locations:
                  type: array
                  items:
                    $ref: '#/components/schemas/Location'
                isPublic:
                  type: boolean
                  default: true
      responses:
        201:
          description: Route created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/routes/search:
    get:
      summary: Search routes
      tags: [Routes]
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Search query
        - in: query
          name: city
          schema:
            type: string
          description: Filter by city
        - in: query
          name: country
          schema:
            type: string
          description: Filter by country
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'

  /api/routes/popular:
    get:
      summary: Get popular routes
      tags: [Routes]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of routes to return
      responses:
        200:
          description: Popular routes
          content:
            application/json:
              schema:
                type: object
                properties:
                  routes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Route'

  /api/routes/{id}:
    get:
      summary: Get specific route
      tags: [Routes]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: objectId
      responses:
        200:
          description: Route details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        404:
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update route
      tags: [Routes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                city:
                  type: string
                country:
                  type: string
                locations:
                  type: array
                  items:
                    $ref: '#/components/schemas/Location'
                isPublic:
                  type: boolean
      responses:
        200:
          description: Route updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete route
      tags: [Routes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: objectId
      responses:
        200:
          description: Route deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}/routes:
    get:
      summary: Get user's routes
      tags: [User Routes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: objectId
        - in: query
          name: sort
          schema:
            type: string
            enum: [latest, oldest]
            default: latest
          description: Sort order
        - in: query
          name: country
          schema:
            type: string
          description: Filter by country
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: User's routes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}/routes/favorites:
    get:
      summary: Get user's favorite routes
      tags: [User Routes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: objectId
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: User's favorite routes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}/routes/{routeId}/favorite:
    post:
      summary: Add route to favorites
      tags: [User Routes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: objectId
        - in: path
          name: routeId
          required: true
          schema:
            type: string
            format: objectId
      responses:
        200:
          description: Route added to favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Route already in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove route from favorites
      tags: [User Routes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: objectId
        - in: path
          name: routeId
          required: true
          schema:
            type: string
            format: objectId
      responses:
        200:
          description: Route removed from favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Route not found in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
